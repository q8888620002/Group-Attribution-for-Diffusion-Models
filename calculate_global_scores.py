"""Calculate model behavior scores for diffusion models."""
import argparse
import json

from pytorch_fid import fid_score

from utils import print_args


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Calculate model behavior scores")
    parser.add_argument(
        "--sample_dir",
        type=str,
        help="directory path of samples generated by a model",
        required=True,
    )
    parser.add_argument(
        "--reference_dir",
        type=str,
        help="directory path of reference samples, from a dataset or a diffusion model",
        required=True,
    )
    parser.add_argument(
        "--db",
        type=str,
        help="filepath of database for recording scores",
        required=True,
    )
    parser.add_argument(
        "--exp_name",
        type=str,
        help="experiment name to record in the database file",
        default=None,
    )
    parser.add_argument(
        "--batch_size",
        type=int,
        help="batch size for computation",
        default=512,
    )
    parser.add_argument(
        "--device", type=str, help="device used for computation", default="cuda:0"
    )
    args = parser.parse_args()
    return args


def main(args):
    """Main function for calculating global model behaviors."""
    print("Calculating the FID score...")
    fid_value = fid_score.calculate_fid_given_paths(
        paths=[args.sample_dir, args.reference_dir],
        batch_size=args.batch_size,
        device=args.device,
        dims=2048,
    )
    fid_value_str = f"{fid_value:.4f}"

    # TODO: Calculate Precision and Recall to capture generated image fidelity and
    # diversity, respectively.

    # Print model behaviors.
    print(f"FID score: {fid_value_str}")

    # Record model behaviors in the database.
    info_dict = vars(args)
    info_dict["fid_value"] = fid_value_str

    with open(args.db, "a+") as f:
        f.write(json.dumps(info_dict) + "\n")
    print(f"Results saved to the database at {args.db}")


if __name__ == "__main__":
    args = parse_args()
    print_args(args)
    main(args)
    print("Done!")
